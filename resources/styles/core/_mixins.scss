@function min-breakpoint($breakpoint) {
  @if map-has-key($grid-breakpoints, $breakpoint) {
    @return map-get($grid-breakpoints, $breakpoint);
  }

  @return $breakpoint;
}

@function max-breakpoint($breakpoint) {
  @if map-has-key($grid-breakpoints, $breakpoint) {
    @return map-get($grid-breakpoints, $breakpoint) - 1px;
  } @else {
    @return $breakpoint;
  }
}

@mixin min-width($breakpoint) {
  @media (min-width: min-breakpoint($breakpoint)) {
    @content;
  }
}

@mixin max-width($breakpoint) {
  @media (max-width: max-breakpoint($breakpoint)) {
    @content;
  }
}
@mixin landscape() {
  @media (max-width: 991px) and (orientation: landscape) {
    @content;
  }
}

@mixin landscapeTablet() {
  @media (min-width: 992px) and (max-width: 1351px) and (orientation: landscape) {
    @content;
  }
}

@mixin colorSVG($color: $color-primary) {
  svg {
    * {
      fill: $color;
    }
  }
}

@mixin resetFocus() {
  &:focus {
    outline: initial;
    border: none;
  }
}

@mixin shadow(
  $width: 5px,
  $color: #000,
  $opacity: 0.2,
  $position: 0 2px,
  $spread: 1px
) {
  box-shadow: $position $width $spread transparentize($color, 1 - $opacity);
}

@mixin resetButton() {
  background: transparent;
  border: none;
  padding: 0;
}

@mixin absolute-center() {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin highContrast() {
  body[data-contrast="high"] & {
    @content;
  }
}

@mixin separator() {
  &:after {
    content: "";
    display: block;
    height: 5px;
    background: $color-secondary;
    /*     @include shadow($opacity: 0.5); */
    max-width: 20%;
    margin-top: 1rem;
  }
}
